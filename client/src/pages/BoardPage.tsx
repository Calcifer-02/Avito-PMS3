// src/pages/BoardPage.tsx
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom"; // –•—É–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞ (ID –¥–æ—Å–∫–∏)
import { updateTaskStatus } from "../api/tasks"; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
import { getBoardTasks } from "../api/boards"; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–æ—Å–∫–∏
import styles from "../styles/Board.module.css"; // –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å–∫–∏
import type { Task } from "../types/task"; // –¢–∏–ø –∑–∞–¥–∞—á–∏
import ModalTaskForm from "../components/ModalTaskForm"; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏

import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á

export default function BoardPage() {
   const { id } = useParams<{ id: string }>(); // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ—Å–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞

   // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ –¥–æ—Å–∫–∏, –∑–∞–¥–∞—á, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
   const [boardName, setBoardName] = useState("–ó–∞–≥—Ä—É–∑–∫–∞...");
   const [tasks, setTasks] = useState<Task[]>([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
   const [showModal, setShowModal] = useState(false); // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   const [selectedTask, setSelectedTask] = useState<Task | null>(null); // –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å

   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–æ—Å–∫–∏ –ø–æ ID
   const fetchBoardTasks = async () => {
      try {
         const boardId = parseInt(id || "0", 10); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
         if (isNaN(boardId)) {
            throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–æ—Å–∫–∏");
         }

         // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ—Å–∫–∏ —Å API
         const data = await getBoardTasks(boardId);

         setTasks(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
         setBoardName(data[0]?.boardName || `–î–æ—Å–∫–∞ ${boardId}`); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –¥–æ—Å–∫–∏
         setLoading(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      } catch (err: any) {
         setError(err.message); // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
         setLoading(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –æ—à–∏–±–∫–æ–π
      }
   };

   useEffect(() => {
      fetchBoardTasks(); // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
   }, [id]); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ID –¥–æ—Å–∫–∏

   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   const handleTaskClick = (task: Task) => {
      setSelectedTask(task); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setShowModal(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
   };

   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
   const handleDragEnd = async (result: any) => {
      const { destination, source, draggableId } = result;

      if (!destination) return; // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (
         destination.droppableId === source.droppableId &&
         destination.index === source.index
      ) {
         return; // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Ç–æ–π –∂–µ –∫–æ–ª–æ–Ω–∫–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
      }

      const taskId = parseInt(draggableId); // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
      const newStatus = destination.droppableId as
         | "Backlog"
         | "InProgress"
         | "Done"; // –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      const sourceStatus = source.droppableId as
         | "Backlog"
         | "InProgress"
         | "Done"; // –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      const sameColumn = sourceStatus === newStatus; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ –∑–∞–¥–∞—á–∞ –≤ —Ç–æ–π –∂–µ –∫–æ–ª–æ–Ω–∫–µ

      try {
         // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è)
         if (!sameColumn) {
            await updateTaskStatus(taskId, newStatus);
         }

         // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
         setTasks((prev) => {
            const movedTask = prev.find((task) => task.id === taskId); // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—é—Ç
            if (!movedTask) return prev;

            const updatedMovedTask = { ...movedTask, status: newStatus }; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏

            // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏
            const filtered = prev.filter((task) => task.id !== taskId);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            const targetColumn = filtered.filter(
               (task) => task.status === newStatus
            );
            const otherTasks = filtered.filter(
               (task) => task.status !== newStatus
            );

            // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
            const reorderedTarget = [...targetColumn];
            reorderedTarget.splice(destination.index, 0, updatedMovedTask);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return [...otherTasks, ...reorderedTarget];
         });
      } catch (err: any) {
         alert(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${err.message}`);
         // üîÑ –ü—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏
         fetchBoardTasks();
      }
   };

   // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
   const filteredTasks = {
      Backlog: tasks.filter((task) => task.status === "Backlog"),
      InProgress: tasks.filter((task) => task.status === "InProgress"),
      Done: tasks.filter((task) => task.status === "Done"),
   };

   if (loading) return <div className={styles.wrapper}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>; // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
   if (error) return <div className={styles.wrapper}>{error}</div>; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ—ë

   return (
      <DragDropContext onDragEnd={handleDragEnd}>
         {" "}
         {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è */}
         <div className={styles.wrapper}>
            <h1 className={styles.title}>–ü—Ä–æ–µ–∫—Ç {boardName}</h1>

            <div className={styles.board}>
               {/* –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∑–∞–¥–∞—á —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "Backlog" */}
               <Droppable droppableId="Backlog">
                  {(provided) => (
                     <div
                        className={styles.columnWrapper}
                        {...provided.droppableProps}
                     >
                        <div className={styles.columnTitle}>Backlog</div>
                        <div
                           className={styles.column}
                           ref={provided.innerRef}
                           {...provided.droppableProps}
                        >
                           {filteredTasks.Backlog.map((task, index) => (
                              <Draggable
                                 key={task.id}
                                 draggableId={task.id.toString()}
                                 index={index}
                              >
                                 {(provided) => (
                                    <div
                                       ref={provided.innerRef}
                                       {...provided.draggableProps}
                                       {...provided.dragHandleProps}
                                       className={styles.taskCard}
                                       onClick={() => handleTaskClick(task)} // –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                       style={{
                                          cursor: "pointer",
                                          ...provided.draggableProps.style,
                                       }}
                                    >
                                       <div className={styles.taskTitle}>
                                          {task.title}
                                       </div>
                                       <div className={styles.taskStatus}>
                                          –°—Ç–∞—Ç—É—Å: {task.status}
                                       </div>
                                       <div className={styles.taskAssignee}>
                                          –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:{" "}
                                          {task.assignee?.fullName ||
                                             "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}
                                       </div>
                                    </div>
                                 )}
                              </Draggable>
                           ))}
                           {provided.placeholder}
                        </div>
                     </div>
                  )}
               </Droppable>

               {/* –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ "InProgress" */}
               <Droppable droppableId="InProgress">
                  {(provided) => (
                     <div
                        className={styles.columnWrapper}
                        {...provided.droppableProps}
                     >
                        <div className={styles.columnTitle}>In Progress</div>
                        <div
                           className={styles.column}
                           ref={provided.innerRef}
                           {...provided.droppableProps}
                        >
                           {filteredTasks.InProgress.map((task, index) => (
                              <Draggable
                                 key={task.id}
                                 draggableId={task.id.toString()}
                                 index={index}
                              >
                                 {(provided) => (
                                    <div
                                       ref={provided.innerRef}
                                       {...provided.draggableProps}
                                       {...provided.dragHandleProps}
                                       className={styles.taskCard}
                                       onClick={() => handleTaskClick(task)} // –ö–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                       style={{
                                          cursor: "pointer",
                                          ...provided.draggableProps.style,
                                       }}
                                    >
                                       <div className={styles.taskTitle}>
                                          {task.title}
                                       </div>
                                       <div className={styles.taskStatus}>
                                          –°—Ç–∞—Ç—É—Å: {task.status}
                                       </div>
                                       <div className={styles.taskAssignee}>
                                          –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.assignee.fullName}
                                       </div>
                                    </div>
                                 )}
                              </Draggable>
                           ))}
                           {provided.placeholder}
                        </div>
                     </div>
                  )}
               </Droppable>

               {/* –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∑–∞–¥–∞—á —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "Done" */}
               <Droppable droppableId="Done">
                  {(provided) => (
                     <div
                        className={styles.columnWrapper}
                        {...provided.droppableProps}
                     >
                        <div className={styles.columnTitle}>Done</div>
                        <div
                           className={styles.column}
                           ref={provided.innerRef}
                           {...provided.droppableProps}
                        >
                           {filteredTasks.Done.map((task, index) => (
                              <Draggable
                                 key={task.id}
                                 draggableId={task.id.toString()}
                                 index={index}
                              >
                                 {(provided) => (
                                    <div
                                       ref={provided.innerRef}
                                       {...provided.draggableProps}
                                       {...provided.dragHandleProps}
                                       className={styles.taskCard}
                                       onClick={() => handleTaskClick(task)} // –ö–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                       style={{
                                          cursor: "pointer",
                                          ...provided.draggableProps.style,
                                       }}
                                    >
                                       <div className={styles.taskTitle}>
                                          {task.title}
                                       </div>
                                       <div className={styles.taskStatus}>
                                          –°—Ç–∞—Ç—É—Å: {task.status}
                                       </div>
                                       <div className={styles.taskAssignee}>
                                          –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.assignee.fullName}
                                       </div>
                                    </div>
                                 )}
                              </Draggable>
                           ))}
                           {provided.placeholder}
                        </div>
                     </div>
                  )}
               </Droppable>
            </div>
         </div>
         {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
         {selectedTask && (
            <ModalTaskForm
               isOpen={showModal}
               onClose={() => setShowModal(false)} // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
               onSubmit={fetchBoardTasks} // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
               initialData={{
                  ...selectedTask, // –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–¥–∞—á–∏
                  assigneeId: selectedTask.assignee.id, // –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º assigneeId
               }}
               isBoardContext={true} // –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ—Å–∫–∏
            />
         )}
      </DragDropContext>
   );
}
